{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"docums-monorepo-plugin \u00b6 Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Docums configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Docums. It is designed to address writing documentation in Spotify's largest and most business-critical codebases (typically monoliths or monorepos). Features \u00b6 Support for multiple docs/ folders in Docums. Having a single docs/ folder in a large codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners . Support for multiple navigations. In Spotify, large repositories typically are split up by multiple owners. These are split by folders. By introducing multiple docums.yml files along with multiple docs/ folder, each team can take ownership of their own navigation. This plugin then intelligently merges of the documentation together into a single repository. Support across multiple repositories. Using Git Submodules it is possible to merge documentation across multiple repositories into a single codebase dynamically. The same great Docums developer experience. It is possible to run docums serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks ! Install \u00b6 It's easy to get started using PyPI and pip using Python: $ pip install docums-monorepo-plugin Usage \u00b6 Take a look at our sample project or do the following: In the root, add the monorepo to your plugins key in docums.yml Create a subfolder, with a docums.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root docums.yml , use the !include syntax in your nav to link to to a subfolder docums.yml Example root /docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 site_name : Cats API # You can declare \"!include\" statements here . This enables you # to include docums . yml that are located in subfolders . In this # case we have two folders ( v1 / and v2/ ) and wish to merge them # into this single navigation . The 'Intro' and 'Authentication' # files are located in the root docs / folder as usual . nav : - Intro : 'index.md' - Authentication : 'authentication.md' - API : - v1 : '!include ./v1/docums.yml' - v2 : '!include ./v2/docums.yml' plugins : - monorepo Example submodule /v1/docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # In this case, we use the site_name to figure out how we should merge # this with the root documentation. It should refer to a folder structure. # The example below will merge documentation as following: # # reference.md -> docs/versions/v1/reference.md -> http://localhost:8000/versions/v1/reference/ # changelog.md -> docs/versions/v1/changelog.md -> http://localhost:8000/versions/v1/changelog/ # site_name : versions / v1 nav : - Reference : \"reference.md\" - Changelog : \"changelog.md\" nav : - code - samples . md Example submodule /v2/docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 # It works the same as above, but with relative to the site_name we use here: # # migrating.md -> docs/versions/v2/migrating.md -> http://localhost:8000/versions/v2/migrating/ # reference.md -> docs/versions/v2/reference.md -> http://localhost:8000/versions/v2/reference/ # changelog.md -> docs/versions/v2/changelog.md -> http://localhost:8000/versions/v2/changelog/ site_name : versions / v2 nav : - Migrating to v2 : \"migrating.md\" - Reference : \"reference.md\" - Changelog : \"changelog.md\" An example filetree when using the Docums Monorepo plugin looks like this: $ tree . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 authentication.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 docums.yml \u251c\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u2514\u2500\u2500 reference.md \u2502 \u2514\u2500\u2500 docums.yml \u2514\u2500\u2500 v2 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 migrating.md \u2502 \u2514\u2500\u2500 reference.md \u2514\u2500\u2500 docums.yml 5 directories, 10 files Supported Versions \u00b6 Python 3 \u2014 3.6, 3.7 Docums 1.0.0.0 and above. Extra Reading \u00b6 docums on GitHub Docums documentation This was built using the docums-plugin-template","title":"Getting Started"},{"location":"#docums-monorepo-plugin","text":"Note: This plugin is in beta. Whilst it is not expected to significantly change in functionality, it may not yet be fully compatible with other Docums configuration and thus may break with some advanced configurations. Once these have been resolved and all bugs have been ironed out, we will move this to a stable release. \u271a This plugin enables you to build multiple sets of documentation in a single Docums. It is designed to address writing documentation in Spotify's largest and most business-critical codebases (typically monoliths or monorepos).","title":"docums-monorepo-plugin"},{"location":"#features","text":"Support for multiple docs/ folders in Docums. Having a single docs/ folder in a large codebase is hard to maintain. Who owns which documentation? What code is it associated with? Bringing docs closer to the associated code enables you to update them better, as well as leverage folder-based features such as GitHub Codeowners . Support for multiple navigations. In Spotify, large repositories typically are split up by multiple owners. These are split by folders. By introducing multiple docums.yml files along with multiple docs/ folder, each team can take ownership of their own navigation. This plugin then intelligently merges of the documentation together into a single repository. Support across multiple repositories. Using Git Submodules it is possible to merge documentation across multiple repositories into a single codebase dynamically. The same great Docums developer experience. It is possible to run docums serve in the root to merge all of your documentation together, or in a subfolder to build specific documentation. Autoreload still works as usual. No more using symlinks !","title":"Features"},{"location":"#install","text":"It's easy to get started using PyPI and pip using Python: $ pip install docums-monorepo-plugin","title":"Install"},{"location":"#usage","text":"Take a look at our sample project or do the following: In the root, add the monorepo to your plugins key in docums.yml Create a subfolder, with a docums.yml with a site_name and nav , as well as a docs/ folder with an index.md Back in in the root docums.yml , use the !include syntax in your nav to link to to a subfolder docums.yml Example root /docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 site_name : Cats API # You can declare \"!include\" statements here . This enables you # to include docums . yml that are located in subfolders . In this # case we have two folders ( v1 / and v2/ ) and wish to merge them # into this single navigation . The 'Intro' and 'Authentication' # files are located in the root docs / folder as usual . nav : - Intro : 'index.md' - Authentication : 'authentication.md' - API : - v1 : '!include ./v1/docums.yml' - v2 : '!include ./v2/docums.yml' plugins : - monorepo Example submodule /v1/docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # In this case, we use the site_name to figure out how we should merge # this with the root documentation. It should refer to a folder structure. # The example below will merge documentation as following: # # reference.md -> docs/versions/v1/reference.md -> http://localhost:8000/versions/v1/reference/ # changelog.md -> docs/versions/v1/changelog.md -> http://localhost:8000/versions/v1/changelog/ # site_name : versions / v1 nav : - Reference : \"reference.md\" - Changelog : \"changelog.md\" nav : - code - samples . md Example submodule /v2/docums.yml 1 2 3 4 5 6 7 8 9 10 11 12 # It works the same as above, but with relative to the site_name we use here: # # migrating.md -> docs/versions/v2/migrating.md -> http://localhost:8000/versions/v2/migrating/ # reference.md -> docs/versions/v2/reference.md -> http://localhost:8000/versions/v2/reference/ # changelog.md -> docs/versions/v2/changelog.md -> http://localhost:8000/versions/v2/changelog/ site_name : versions / v2 nav : - Migrating to v2 : \"migrating.md\" - Reference : \"reference.md\" - Changelog : \"changelog.md\" An example filetree when using the Docums Monorepo plugin looks like this: $ tree . \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 authentication.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 docums.yml \u251c\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 docs \u2502 \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u2502 \u2514\u2500\u2500 reference.md \u2502 \u2514\u2500\u2500 docums.yml \u2514\u2500\u2500 v2 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 changelog.md \u2502 \u251c\u2500\u2500 migrating.md \u2502 \u2514\u2500\u2500 reference.md \u2514\u2500\u2500 docums.yml 5 directories, 10 files","title":"Usage"},{"location":"#supported-versions","text":"Python 3 \u2014 3.6, 3.7 Docums 1.0.0.0 and above.","title":"Supported Versions"},{"location":"#extra-reading","text":"docums on GitHub Docums documentation This was built using the docums-plugin-template","title":"Extra Reading"},{"location":"limitations/","text":"Caveats / Known Design Decisions \u00b6 In an included docums.yml , you cannot have !include . It is only supported in the root docums.yml","title":"Limitations"},{"location":"limitations/#caveats-known-design-decisions","text":"In an included docums.yml , you cannot have !include . It is only supported in the root docums.yml","title":"Caveats / Known Design Decisions"},{"location":"philosophy/","text":"Philosophy \u00b6 This plugin is designed to solve documentation in large codebases \u2014 whether monorepos, monoliths or sizeable codebases in general \u2014 by enabling Docums to be split out into smaller documentation folders. Then when shipping a change to production, merge the documentation together into a single, digestable site. Typically, in these large codebases, there is often complex ownership. Teams may own folders, files, or even parts of a single file. This localizes documentation to the code so it can seamlessly inherit ownership strategies designed for code, such as GitHub Codeowners . It was originally designed to improve the documentation process in Spotify's critical software, some which are monoliths with complex ownership across many teams, offices, and continents.","title":"Philosophy"},{"location":"philosophy/#philosophy","text":"This plugin is designed to solve documentation in large codebases \u2014 whether monorepos, monoliths or sizeable codebases in general \u2014 by enabling Docums to be split out into smaller documentation folders. Then when shipping a change to production, merge the documentation together into a single, digestable site. Typically, in these large codebases, there is often complex ownership. Teams may own folders, files, or even parts of a single file. This localizes documentation to the code so it can seamlessly inherit ownership strategies designed for code, such as GitHub Codeowners . It was originally designed to improve the documentation process in Spotify's critical software, some which are monoliths with complex ownership across many teams, offices, and continents.","title":"Philosophy"}]}